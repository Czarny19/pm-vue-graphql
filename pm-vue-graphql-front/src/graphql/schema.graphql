# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"columns and relationships of \"PROJECT\""
type PROJECT {
    create_date: date!
    definition: xml!
    description: String!
    id: bigint!
    name: String!
    user_id: bigint!
}

"aggregated selection of \"PROJECT\""
type PROJECT_aggregate {
    aggregate: PROJECT_aggregate_fields
    nodes: [PROJECT!]!
}

"aggregate fields of \"PROJECT\""
type PROJECT_aggregate_fields {
    avg: PROJECT_avg_fields
    count(columns: [PROJECT_select_column!], distinct: Boolean): Int
    max: PROJECT_max_fields
    min: PROJECT_min_fields
    stddev: PROJECT_stddev_fields
    stddev_pop: PROJECT_stddev_pop_fields
    stddev_samp: PROJECT_stddev_samp_fields
    sum: PROJECT_sum_fields
    var_pop: PROJECT_var_pop_fields
    var_samp: PROJECT_var_samp_fields
    variance: PROJECT_variance_fields
}

"aggregate avg on columns"
type PROJECT_avg_fields {
    id: Float
    user_id: Float
}

"aggregate max on columns"
type PROJECT_max_fields {
    create_date: date
    description: String
    id: bigint
    name: String
    user_id: bigint
}

"aggregate min on columns"
type PROJECT_min_fields {
    create_date: date
    description: String
    id: bigint
    name: String
    user_id: bigint
}

"response of any mutation on the table \"PROJECT\""
type PROJECT_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [PROJECT!]!
}

"aggregate stddev on columns"
type PROJECT_stddev_fields {
    id: Float
    user_id: Float
}

"aggregate stddev_pop on columns"
type PROJECT_stddev_pop_fields {
    id: Float
    user_id: Float
}

"aggregate stddev_samp on columns"
type PROJECT_stddev_samp_fields {
    id: Float
    user_id: Float
}

"aggregate sum on columns"
type PROJECT_sum_fields {
    id: bigint
    user_id: bigint
}

"aggregate var_pop on columns"
type PROJECT_var_pop_fields {
    id: Float
    user_id: Float
}

"aggregate var_samp on columns"
type PROJECT_var_samp_fields {
    id: Float
    user_id: Float
}

"aggregate variance on columns"
type PROJECT_variance_fields {
    id: Float
    user_id: Float
}

"columns and relationships of \"THEME\""
type THEME {
    accent_color: String!
    create_date: date!
    error_color: String!
    id: bigint!
    info_color: String!
    name: String!
    primary_color: String!
    secondary_color: String!
    succes_color: String!
    user_id: bigint!
}

"aggregated selection of \"THEME\""
type THEME_aggregate {
    aggregate: THEME_aggregate_fields
    nodes: [THEME!]!
}

"aggregate fields of \"THEME\""
type THEME_aggregate_fields {
    avg: THEME_avg_fields
    count(columns: [THEME_select_column!], distinct: Boolean): Int
    max: THEME_max_fields
    min: THEME_min_fields
    stddev: THEME_stddev_fields
    stddev_pop: THEME_stddev_pop_fields
    stddev_samp: THEME_stddev_samp_fields
    sum: THEME_sum_fields
    var_pop: THEME_var_pop_fields
    var_samp: THEME_var_samp_fields
    variance: THEME_variance_fields
}

"aggregate avg on columns"
type THEME_avg_fields {
    id: Float
    user_id: Float
}

"aggregate max on columns"
type THEME_max_fields {
    accent_color: String
    create_date: date
    error_color: String
    id: bigint
    info_color: String
    name: String
    primary_color: String
    secondary_color: String
    succes_color: String
    user_id: bigint
}

"aggregate min on columns"
type THEME_min_fields {
    accent_color: String
    create_date: date
    error_color: String
    id: bigint
    info_color: String
    name: String
    primary_color: String
    secondary_color: String
    succes_color: String
    user_id: bigint
}

"response of any mutation on the table \"THEME\""
type THEME_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [THEME!]!
}

"aggregate stddev on columns"
type THEME_stddev_fields {
    id: Float
    user_id: Float
}

"aggregate stddev_pop on columns"
type THEME_stddev_pop_fields {
    id: Float
    user_id: Float
}

"aggregate stddev_samp on columns"
type THEME_stddev_samp_fields {
    id: Float
    user_id: Float
}

"aggregate sum on columns"
type THEME_sum_fields {
    id: bigint
    user_id: bigint
}

"aggregate var_pop on columns"
type THEME_var_pop_fields {
    id: Float
    user_id: Float
}

"aggregate var_samp on columns"
type THEME_var_samp_fields {
    id: Float
    user_id: Float
}

"aggregate variance on columns"
type THEME_variance_fields {
    id: Float
    user_id: Float
}

"columns and relationships of \"USER\""
type USER {
    email: String!
    id: bigint!
    password: String!
    "An object relationship"
    projects: PROJECT
    "An object relationship"
    themes: THEME
}

"aggregated selection of \"USER\""
type USER_aggregate {
    aggregate: USER_aggregate_fields
    nodes: [USER!]!
}

"aggregate fields of \"USER\""
type USER_aggregate_fields {
    avg: USER_avg_fields
    count(columns: [USER_select_column!], distinct: Boolean): Int
    max: USER_max_fields
    min: USER_min_fields
    stddev: USER_stddev_fields
    stddev_pop: USER_stddev_pop_fields
    stddev_samp: USER_stddev_samp_fields
    sum: USER_sum_fields
    var_pop: USER_var_pop_fields
    var_samp: USER_var_samp_fields
    variance: USER_variance_fields
}

"aggregate avg on columns"
type USER_avg_fields {
    id: Float
}

"aggregate max on columns"
type USER_max_fields {
    email: String
    id: bigint
    password: String
}

"aggregate min on columns"
type USER_min_fields {
    email: String
    id: bigint
    password: String
}

"response of any mutation on the table \"USER\""
type USER_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [USER!]!
}

"aggregate stddev on columns"
type USER_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type USER_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type USER_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type USER_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type USER_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type USER_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type USER_variance_fields {
    id: Float
}

"mutation root"
type mutation_root {
    "delete data from the table: \"PROJECT\""
    delete_PROJECT(
        "filter the rows which have to be deleted"
        where: PROJECT_bool_exp!
    ): PROJECT_mutation_response
    "delete single row from the table: \"PROJECT\""
    delete_PROJECT_by_pk(id: bigint!): PROJECT
    "delete data from the table: \"THEME\""
    delete_THEME(
        "filter the rows which have to be deleted"
        where: THEME_bool_exp!
    ): THEME_mutation_response
    "delete single row from the table: \"THEME\""
    delete_THEME_by_pk(id: bigint!): THEME
    "delete data from the table: \"USER\""
    delete_USER(
        "filter the rows which have to be deleted"
        where: USER_bool_exp!
    ): USER_mutation_response
    "delete single row from the table: \"USER\""
    delete_USER_by_pk(id: bigint!): USER
    "insert data into the table: \"PROJECT\""
    insert_PROJECT(
        "the rows to be inserted"
        objects: [PROJECT_insert_input!]!,
        "on conflict condition"
        on_conflict: PROJECT_on_conflict
    ): PROJECT_mutation_response
    "insert a single row into the table: \"PROJECT\""
    insert_PROJECT_one(
        "the row to be inserted"
        object: PROJECT_insert_input!,
        "on conflict condition"
        on_conflict: PROJECT_on_conflict
    ): PROJECT
    "insert data into the table: \"THEME\""
    insert_THEME(
        "the rows to be inserted"
        objects: [THEME_insert_input!]!,
        "on conflict condition"
        on_conflict: THEME_on_conflict
    ): THEME_mutation_response
    "insert a single row into the table: \"THEME\""
    insert_THEME_one(
        "the row to be inserted"
        object: THEME_insert_input!,
        "on conflict condition"
        on_conflict: THEME_on_conflict
    ): THEME
    "insert data into the table: \"USER\""
    insert_USER(
        "the rows to be inserted"
        objects: [USER_insert_input!]!,
        "on conflict condition"
        on_conflict: USER_on_conflict
    ): USER_mutation_response
    "insert a single row into the table: \"USER\""
    insert_USER_one(
        "the row to be inserted"
        object: USER_insert_input!,
        "on conflict condition"
        on_conflict: USER_on_conflict
    ): USER
    "update data of the table: \"PROJECT\""
    update_PROJECT(
        "increments the integer columns with given value of the filtered values"
        _inc: PROJECT_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: PROJECT_set_input,
        "filter the rows which have to be updated"
        where: PROJECT_bool_exp!
    ): PROJECT_mutation_response
    "update single row of the table: \"PROJECT\""
    update_PROJECT_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: PROJECT_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: PROJECT_set_input,
        pk_columns: PROJECT_pk_columns_input!
    ): PROJECT
    "update data of the table: \"THEME\""
    update_THEME(
        "increments the integer columns with given value of the filtered values"
        _inc: THEME_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: THEME_set_input,
        "filter the rows which have to be updated"
        where: THEME_bool_exp!
    ): THEME_mutation_response
    "update single row of the table: \"THEME\""
    update_THEME_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: THEME_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: THEME_set_input,
        pk_columns: THEME_pk_columns_input!
    ): THEME
    "update data of the table: \"USER\""
    update_USER(
        "increments the integer columns with given value of the filtered values"
        _inc: USER_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: USER_set_input,
        "filter the rows which have to be updated"
        where: USER_bool_exp!
    ): USER_mutation_response
    "update single row of the table: \"USER\""
    update_USER_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: USER_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: USER_set_input,
        pk_columns: USER_pk_columns_input!
    ): USER
}

"query root"
type query_root {
    "fetch data from the table: \"PROJECT\""
    PROJECT(
        "distinct select on columns"
        distinct_on: [PROJECT_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [PROJECT_order_by!],
        "filter the rows returned"
        where: PROJECT_bool_exp
    ): [PROJECT!]!
    "fetch aggregated fields from the table: \"PROJECT\""
    PROJECT_aggregate(
        "distinct select on columns"
        distinct_on: [PROJECT_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [PROJECT_order_by!],
        "filter the rows returned"
        where: PROJECT_bool_exp
    ): PROJECT_aggregate!
    "fetch data from the table: \"PROJECT\" using primary key columns"
    PROJECT_by_pk(id: bigint!): PROJECT
    "fetch data from the table: \"THEME\""
    THEME(
        "distinct select on columns"
        distinct_on: [THEME_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [THEME_order_by!],
        "filter the rows returned"
        where: THEME_bool_exp
    ): [THEME!]!
    "fetch aggregated fields from the table: \"THEME\""
    THEME_aggregate(
        "distinct select on columns"
        distinct_on: [THEME_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [THEME_order_by!],
        "filter the rows returned"
        where: THEME_bool_exp
    ): THEME_aggregate!
    "fetch data from the table: \"THEME\" using primary key columns"
    THEME_by_pk(id: bigint!): THEME
    "fetch data from the table: \"USER\""
    USER(
        "distinct select on columns"
        distinct_on: [USER_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [USER_order_by!],
        "filter the rows returned"
        where: USER_bool_exp
    ): [USER!]!
    "fetch aggregated fields from the table: \"USER\""
    USER_aggregate(
        "distinct select on columns"
        distinct_on: [USER_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [USER_order_by!],
        "filter the rows returned"
        where: USER_bool_exp
    ): USER_aggregate!
    "fetch data from the table: \"USER\" using primary key columns"
    USER_by_pk(id: bigint!): USER
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"PROJECT\""
    PROJECT(
        "distinct select on columns"
        distinct_on: [PROJECT_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [PROJECT_order_by!],
        "filter the rows returned"
        where: PROJECT_bool_exp
    ): [PROJECT!]!
    "fetch aggregated fields from the table: \"PROJECT\""
    PROJECT_aggregate(
        "distinct select on columns"
        distinct_on: [PROJECT_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [PROJECT_order_by!],
        "filter the rows returned"
        where: PROJECT_bool_exp
    ): PROJECT_aggregate!
    "fetch data from the table: \"PROJECT\" using primary key columns"
    PROJECT_by_pk(id: bigint!): PROJECT
    "fetch data from the table: \"THEME\""
    THEME(
        "distinct select on columns"
        distinct_on: [THEME_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [THEME_order_by!],
        "filter the rows returned"
        where: THEME_bool_exp
    ): [THEME!]!
    "fetch aggregated fields from the table: \"THEME\""
    THEME_aggregate(
        "distinct select on columns"
        distinct_on: [THEME_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [THEME_order_by!],
        "filter the rows returned"
        where: THEME_bool_exp
    ): THEME_aggregate!
    "fetch data from the table: \"THEME\" using primary key columns"
    THEME_by_pk(id: bigint!): THEME
    "fetch data from the table: \"USER\""
    USER(
        "distinct select on columns"
        distinct_on: [USER_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [USER_order_by!],
        "filter the rows returned"
        where: USER_bool_exp
    ): [USER!]!
    "fetch aggregated fields from the table: \"USER\""
    USER_aggregate(
        "distinct select on columns"
        distinct_on: [USER_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [USER_order_by!],
        "filter the rows returned"
        where: USER_bool_exp
    ): USER_aggregate!
    "fetch data from the table: \"USER\" using primary key columns"
    USER_by_pk(id: bigint!): USER
}

"unique or primary key constraints on table \"PROJECT\""
enum PROJECT_constraint {
    "unique or primary key constraint"
    PROJECT_pkey
}

"select columns of table \"PROJECT\""
enum PROJECT_select_column {
    "column name"
    create_date
    "column name"
    definition
    "column name"
    description
    "column name"
    id
    "column name"
    name
    "column name"
    user_id
}

"update columns of table \"PROJECT\""
enum PROJECT_update_column {
    "column name"
    create_date
    "column name"
    definition
    "column name"
    description
    "column name"
    id
    "column name"
    name
    "column name"
    user_id
}

"unique or primary key constraints on table \"THEME\""
enum THEME_constraint {
    "unique or primary key constraint"
    THEME_pkey
}

"select columns of table \"THEME\""
enum THEME_select_column {
    "column name"
    accent_color
    "column name"
    create_date
    "column name"
    error_color
    "column name"
    id
    "column name"
    info_color
    "column name"
    name
    "column name"
    primary_color
    "column name"
    secondary_color
    "column name"
    succes_color
    "column name"
    user_id
}

"update columns of table \"THEME\""
enum THEME_update_column {
    "column name"
    accent_color
    "column name"
    create_date
    "column name"
    error_color
    "column name"
    id
    "column name"
    info_color
    "column name"
    name
    "column name"
    primary_color
    "column name"
    secondary_color
    "column name"
    succes_color
    "column name"
    user_id
}

"unique or primary key constraints on table \"USER\""
enum USER_constraint {
    "unique or primary key constraint"
    USER_email_key
    "unique or primary key constraint"
    USER_pkey
}

"select columns of table \"USER\""
enum USER_select_column {
    "column name"
    email
    "column name"
    id
    "column name"
    password
}

"update columns of table \"USER\""
enum USER_update_column {
    "column name"
    email
    "column name"
    id
    "column name"
    password
}

"column ordering options"
enum order_by {
    "in the ascending order, nulls last"
    asc
    "in the ascending order, nulls first"
    asc_nulls_first
    "in the ascending order, nulls last"
    asc_nulls_last
    "in the descending order, nulls first"
    desc
    "in the descending order, nulls first"
    desc_nulls_first
    "in the descending order, nulls last"
    desc_nulls_last
}

"order by aggregate values of table \"PROJECT\""
input PROJECT_aggregate_order_by {
    avg: PROJECT_avg_order_by
    count: order_by
    max: PROJECT_max_order_by
    min: PROJECT_min_order_by
    stddev: PROJECT_stddev_order_by
    stddev_pop: PROJECT_stddev_pop_order_by
    stddev_samp: PROJECT_stddev_samp_order_by
    sum: PROJECT_sum_order_by
    var_pop: PROJECT_var_pop_order_by
    var_samp: PROJECT_var_samp_order_by
    variance: PROJECT_variance_order_by
}

"input type for inserting array relation for remote table \"PROJECT\""
input PROJECT_arr_rel_insert_input {
    data: [PROJECT_insert_input!]!
    on_conflict: PROJECT_on_conflict
}

"order by avg() on columns of table \"PROJECT\""
input PROJECT_avg_order_by {
    id: order_by
    user_id: order_by
}

"Boolean expression to filter rows from the table \"PROJECT\". All fields are combined with a logical 'AND'."
input PROJECT_bool_exp {
    _and: [PROJECT_bool_exp]
    _not: PROJECT_bool_exp
    _or: [PROJECT_bool_exp]
    create_date: date_comparison_exp
    definition: xml_comparison_exp
    description: String_comparison_exp
    id: bigint_comparison_exp
    name: String_comparison_exp
    user_id: bigint_comparison_exp
}

"input type for incrementing integer column in table \"PROJECT\""
input PROJECT_inc_input {
    id: bigint
    user_id: bigint
}

"input type for inserting data into table \"PROJECT\""
input PROJECT_insert_input {
    create_date: date
    definition: xml
    description: String
    id: bigint
    name: String
    user_id: bigint
}

"order by max() on columns of table \"PROJECT\""
input PROJECT_max_order_by {
    create_date: order_by
    description: order_by
    id: order_by
    name: order_by
    user_id: order_by
}

"order by min() on columns of table \"PROJECT\""
input PROJECT_min_order_by {
    create_date: order_by
    description: order_by
    id: order_by
    name: order_by
    user_id: order_by
}

"input type for inserting object relation for remote table \"PROJECT\""
input PROJECT_obj_rel_insert_input {
    data: PROJECT_insert_input!
    on_conflict: PROJECT_on_conflict
}

"on conflict condition type for table \"PROJECT\""
input PROJECT_on_conflict {
    constraint: PROJECT_constraint!
    update_columns: [PROJECT_update_column!]!
    where: PROJECT_bool_exp
}

"ordering options when selecting data from \"PROJECT\""
input PROJECT_order_by {
    create_date: order_by
    definition: order_by
    description: order_by
    id: order_by
    name: order_by
    user_id: order_by
}

"primary key columns input for table: \"PROJECT\""
input PROJECT_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"PROJECT\""
input PROJECT_set_input {
    create_date: date
    definition: xml
    description: String
    id: bigint
    name: String
    user_id: bigint
}

"order by stddev() on columns of table \"PROJECT\""
input PROJECT_stddev_order_by {
    id: order_by
    user_id: order_by
}

"order by stddev_pop() on columns of table \"PROJECT\""
input PROJECT_stddev_pop_order_by {
    id: order_by
    user_id: order_by
}

"order by stddev_samp() on columns of table \"PROJECT\""
input PROJECT_stddev_samp_order_by {
    id: order_by
    user_id: order_by
}

"order by sum() on columns of table \"PROJECT\""
input PROJECT_sum_order_by {
    id: order_by
    user_id: order_by
}

"order by var_pop() on columns of table \"PROJECT\""
input PROJECT_var_pop_order_by {
    id: order_by
    user_id: order_by
}

"order by var_samp() on columns of table \"PROJECT\""
input PROJECT_var_samp_order_by {
    id: order_by
    user_id: order_by
}

"order by variance() on columns of table \"PROJECT\""
input PROJECT_variance_order_by {
    id: order_by
    user_id: order_by
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"order by aggregate values of table \"THEME\""
input THEME_aggregate_order_by {
    avg: THEME_avg_order_by
    count: order_by
    max: THEME_max_order_by
    min: THEME_min_order_by
    stddev: THEME_stddev_order_by
    stddev_pop: THEME_stddev_pop_order_by
    stddev_samp: THEME_stddev_samp_order_by
    sum: THEME_sum_order_by
    var_pop: THEME_var_pop_order_by
    var_samp: THEME_var_samp_order_by
    variance: THEME_variance_order_by
}

"input type for inserting array relation for remote table \"THEME\""
input THEME_arr_rel_insert_input {
    data: [THEME_insert_input!]!
    on_conflict: THEME_on_conflict
}

"order by avg() on columns of table \"THEME\""
input THEME_avg_order_by {
    id: order_by
    user_id: order_by
}

"Boolean expression to filter rows from the table \"THEME\". All fields are combined with a logical 'AND'."
input THEME_bool_exp {
    _and: [THEME_bool_exp]
    _not: THEME_bool_exp
    _or: [THEME_bool_exp]
    accent_color: String_comparison_exp
    create_date: date_comparison_exp
    error_color: String_comparison_exp
    id: bigint_comparison_exp
    info_color: String_comparison_exp
    name: String_comparison_exp
    primary_color: String_comparison_exp
    secondary_color: String_comparison_exp
    succes_color: String_comparison_exp
    user_id: bigint_comparison_exp
}

"input type for incrementing integer column in table \"THEME\""
input THEME_inc_input {
    id: bigint
    user_id: bigint
}

"input type for inserting data into table \"THEME\""
input THEME_insert_input {
    accent_color: String
    create_date: date
    error_color: String
    id: bigint
    info_color: String
    name: String
    primary_color: String
    secondary_color: String
    succes_color: String
    user_id: bigint
}

"order by max() on columns of table \"THEME\""
input THEME_max_order_by {
    accent_color: order_by
    create_date: order_by
    error_color: order_by
    id: order_by
    info_color: order_by
    name: order_by
    primary_color: order_by
    secondary_color: order_by
    succes_color: order_by
    user_id: order_by
}

"order by min() on columns of table \"THEME\""
input THEME_min_order_by {
    accent_color: order_by
    create_date: order_by
    error_color: order_by
    id: order_by
    info_color: order_by
    name: order_by
    primary_color: order_by
    secondary_color: order_by
    succes_color: order_by
    user_id: order_by
}

"input type for inserting object relation for remote table \"THEME\""
input THEME_obj_rel_insert_input {
    data: THEME_insert_input!
    on_conflict: THEME_on_conflict
}

"on conflict condition type for table \"THEME\""
input THEME_on_conflict {
    constraint: THEME_constraint!
    update_columns: [THEME_update_column!]!
    where: THEME_bool_exp
}

"ordering options when selecting data from \"THEME\""
input THEME_order_by {
    accent_color: order_by
    create_date: order_by
    error_color: order_by
    id: order_by
    info_color: order_by
    name: order_by
    primary_color: order_by
    secondary_color: order_by
    succes_color: order_by
    user_id: order_by
}

"primary key columns input for table: \"THEME\""
input THEME_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"THEME\""
input THEME_set_input {
    accent_color: String
    create_date: date
    error_color: String
    id: bigint
    info_color: String
    name: String
    primary_color: String
    secondary_color: String
    succes_color: String
    user_id: bigint
}

"order by stddev() on columns of table \"THEME\""
input THEME_stddev_order_by {
    id: order_by
    user_id: order_by
}

"order by stddev_pop() on columns of table \"THEME\""
input THEME_stddev_pop_order_by {
    id: order_by
    user_id: order_by
}

"order by stddev_samp() on columns of table \"THEME\""
input THEME_stddev_samp_order_by {
    id: order_by
    user_id: order_by
}

"order by sum() on columns of table \"THEME\""
input THEME_sum_order_by {
    id: order_by
    user_id: order_by
}

"order by var_pop() on columns of table \"THEME\""
input THEME_var_pop_order_by {
    id: order_by
    user_id: order_by
}

"order by var_samp() on columns of table \"THEME\""
input THEME_var_samp_order_by {
    id: order_by
    user_id: order_by
}

"order by variance() on columns of table \"THEME\""
input THEME_variance_order_by {
    id: order_by
    user_id: order_by
}

"order by aggregate values of table \"USER\""
input USER_aggregate_order_by {
    avg: USER_avg_order_by
    count: order_by
    max: USER_max_order_by
    min: USER_min_order_by
    stddev: USER_stddev_order_by
    stddev_pop: USER_stddev_pop_order_by
    stddev_samp: USER_stddev_samp_order_by
    sum: USER_sum_order_by
    var_pop: USER_var_pop_order_by
    var_samp: USER_var_samp_order_by
    variance: USER_variance_order_by
}

"input type for inserting array relation for remote table \"USER\""
input USER_arr_rel_insert_input {
    data: [USER_insert_input!]!
    on_conflict: USER_on_conflict
}

"order by avg() on columns of table \"USER\""
input USER_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"USER\". All fields are combined with a logical 'AND'."
input USER_bool_exp {
    _and: [USER_bool_exp]
    _not: USER_bool_exp
    _or: [USER_bool_exp]
    email: String_comparison_exp
    id: bigint_comparison_exp
    password: String_comparison_exp
    projects: PROJECT_bool_exp
    themes: THEME_bool_exp
}

"input type for incrementing integer column in table \"USER\""
input USER_inc_input {
    id: bigint
}

"input type for inserting data into table \"USER\""
input USER_insert_input {
    email: String
    id: bigint
    password: String
    projects: PROJECT_obj_rel_insert_input
    themes: THEME_obj_rel_insert_input
}

"order by max() on columns of table \"USER\""
input USER_max_order_by {
    email: order_by
    id: order_by
    password: order_by
}

"order by min() on columns of table \"USER\""
input USER_min_order_by {
    email: order_by
    id: order_by
    password: order_by
}

"input type for inserting object relation for remote table \"USER\""
input USER_obj_rel_insert_input {
    data: USER_insert_input!
    on_conflict: USER_on_conflict
}

"on conflict condition type for table \"USER\""
input USER_on_conflict {
    constraint: USER_constraint!
    update_columns: [USER_update_column!]!
    where: USER_bool_exp
}

"ordering options when selecting data from \"USER\""
input USER_order_by {
    email: order_by
    id: order_by
    password: order_by
    projects: PROJECT_order_by
    themes: THEME_order_by
}

"primary key columns input for table: \"USER\""
input USER_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"USER\""
input USER_set_input {
    email: String
    id: bigint
    password: String
}

"order by stddev() on columns of table \"USER\""
input USER_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"USER\""
input USER_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"USER\""
input USER_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"USER\""
input USER_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"USER\""
input USER_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"USER\""
input USER_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"USER\""
input USER_variance_order_by {
    id: order_by
}

"expression to compare columns of type bigint. All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"expression to compare columns of type date. All fields are combined with logical 'AND'."
input date_comparison_exp {
    _eq: date
    _gt: date
    _gte: date
    _in: [date!]
    _is_null: Boolean
    _lt: date
    _lte: date
    _neq: date
    _nin: [date!]
}

"expression to compare columns of type xml. All fields are combined with logical 'AND'."
input xml_comparison_exp {
    _eq: xml
    _gt: xml
    _gte: xml
    _in: [xml!]
    _is_null: Boolean
    _lt: xml
    _lte: xml
    _neq: xml
    _nin: [xml!]
}


scalar bigint

scalar date

scalar xml